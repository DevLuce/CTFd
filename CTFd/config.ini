# CTFd Configuration File
#
# Use this file to configure aspects of how CTFd behaves. Additional attributes can be specified for
# plugins and other additional behavior.
#
# If a configuration item is specified but left empty, CTFd will do the following:
#
#   1. Look for an environment variable under the same name and use that value if found
#   2. Use a default value specified in it's own internal configuration
#   3. Use a null value (i.e. None) or empty string for the configuration value
#
# 이 파일을 통해 CTFd 실행 환경을 구성합니다.
# 플러그인 및 기타 모듈에 대해 추가적인 속성을 설정할 수 있습니다. 
#
# 지정된 구성 항목이 비어있는 경우, CTFd는 다음을 수행합니다.:
#
#   1. 동일한 이름의 환경 변수를 탐색하고, 찾은 경우 해당 값을 사용합니다.
#   2. 자체 내부 설정에 지정된 기본 값을 사용합니다.
#   3. 해당 설정 값은 null 값 (예: None) 혹은 빈 문자열을 사용합니다.


[server]
# SECRET_KEY:
# The secret value used to creation sessions and sign strings. This should be set to a random string. In the
# interest of ease, CTFd will automatically create a secret key file for you. If you wish to add this secret key
# to your instance you should hard code this value to a random static value.
#
# You can also remove .ctfd_secret_key from the .gitignore file and commit this file into whatever repository
# you are using.
#
# 세션을 생성하고 서명하는데 사용되는 비밀 값입니다. 이 값은 임의의 문자열로 설정되어야 합니다.
# 편의를 위해 CTFd가 자동으로 비밀 키 파일을 생성합니다.
# 이 비밀 키를 인스턴스에 추가하기 위해서는 이 값을 정적 값으로 하드 코딩해야 합니다.
#
# 또한 .gitignore 파일에서 .ctfd_secret_key 를 제거하고 사용하고자 하는 모든 레포지토리에 이 파일을 커밋할 수 있습니다.
#
# http://flask.pocoo.org/docs/latest/quickstart/#sessions
SECRET_KEY =

# DATABASE_URL
# The URI that specifies the username, password, hostname, port, and database of the server
# used to hold the CTFd database.
#
# If a database URL is not specified, CTFd will automatically create a SQLite database for you to use
#
# CTFd 데이터베이스에 사용되는 username, password, hostname, port, database 를 지정하는 URI 입니다.
#
# 데이터베이스 URL이 지정되지 않은 경우 CTFd는 유저가 사용할 SQLite 데이터베이스를 자동으로 생성합니다.
#
# e.g. mysql+pymysql://root:<YOUR_PASSWORD_HERE>@localhost/ctfd
DATABASE_URL =

# REDIS_URL
# The URL to connect to a Redis server. If not specified, CTFd will use the .data folder as a filesystem cache
#
# Redis 서버에 연결할 URL 입니다. 지정하지 않으면, .data 폴더를 파일 시스템 캐시로 사용하게 됩니다.
#
# e.g. redis://user:password@localhost:6379
# http://pythonhosted.org/Flask-Caching/#configuring-flask-caching
REDIS_URL =

[security]
# SESSION_COOKIE_HTTPONLY
# Controls if cookies should be set with the HttpOnly flag. Defaults to True.
# 쿠키를 HttpOnly 플래그로 설정 여부를 정합니다. 기본값은 True 입니다.
SESSION_COOKIE_HTTPONLY = true

# SESSION_COOKIE_SAMESITE
# Controls the SameSite attribute on session cookies. Can be Lax or Strict.
# Should be left as Lax unless the implications are well understood
# 세션 쿠키의 SameSite 속성을 설정합니다. Lax 또는 Strict.
# 의미를 잘 이해하지 못한다면 Lax로 남겨두십시오.
SESSION_COOKIE_SAMESITE = Lax

# PERMANENT_SESSION_LIFETIME
# The lifetime of a session. The default is 604800 seconds (7 days).
# 세션의 수명입니다. 기본 값은 604800초(7일)입니다.
PERMANENT_SESSION_LIFETIME = 604800

[email]
# MAILFROM_ADDR
# The email address that emails are sent from if not overridden in the configuration panel.
# 설정 패널에서 재정의 되지 않았을 때, 이메일을 발송하는 이메일 주소입니다.
MAILFROM_ADDR =

# MAIL_SERVER
# The mail server that emails are sent from if not overriden in the configuration panel.
# 설정 패널에서 재정의 되지 않았을 때, 이메일을 발송하는 메일 서버입니다.
MAIL_SERVER =

# MAIL_PORT
# The mail port that emails are sent from if not overriden in the configuration panel.
# 설정 패널에서 재정의 되지 않았을 때, 이메일을 발송하는 메일 포트입니다.
MAIL_PORT =

# MAIL_USEAUTH
# Whether or not to use username and password to authenticate to the SMTP server
# SMTP 서버에 인증 확인에서 유저 이름과 비밀번호의 사용 여부를 설정합니다.
MAIL_USEAUTH =

# MAIL_USERNAME
# The username used to authenticate to the SMTP server if MAIL_USEAUTH is defined
# MAIL_USEAUTU 사용 설정 된 경우에 사용되는 유저 이름입니다. 
MAIL_USERNAME =

# MAIL_PASSWORD
# The password used to authenticate to the SMTP server if MAIL_USEAUTH is defined
# MAIL_USEAUTU 사용 설정 된 경우에 사용되는 비밀번호입니다.
MAIL_PASSWORD =

# MAIL_TLS
# Whether to connect to the SMTP server over TLS
# TLS를 통한 SMTP 서버 연결 여부를 설정합니다.
MAIL_TLS =

# MAIL_SSL
# Whether to connect to the SMTP server over SSL
# SSL을 통한 SMTP 서버 연결 여부를 설정합니다.
MAIL_SSL =

# MAILSENDER_ADDR
# The email address that is responsible for the transmission of emails.
# This is very often the MAILFROM_ADDR value but can be specified if your email
# is delivered by a different domain than what's specified in your MAILFROM_ADDR.
# If this isn't specified, the MAILFROM_ADDR value is used.
# It is fairly rare to need to set this value.
# 이메일 발송을 담당하는 이메일 주소입니다..
# 이 값은 보통 MAILFROM_ADDR 값이지만 
# MAILFROM_ADDR 으로 지정된 도메인이 아닌 다른 도메인에서 메일을 발송하는 경우 설정할 수 있습니다.
# 이 값을 설정하지 않으면 MAILFROM_ADDR 값이 사용됩니다.
# 이 값을 설정하는 경우는 매우 드뭅니다.
MAILSENDER_ADDR =

# MAILGUN_API_KEY
# Mailgun API key to send email over Mailgun. As of CTFd v3, Mailgun integration is deprecated.
# Installations using the Mailgun API should migrate over to SMTP settings.
# Mailgun 을 통해 이메일을 발송하기 위한 Mailgun API 키입니다. CTFd v3 부터 Mailgun 확장은 더 이상 사용되지 않습니다.
# Mailgun API 설치는 SMTP 설정으로 마이그레이션 해야합니다.
MAILGUN_API_KEY =

# MAILGUN_BASE_URL
# Mailgun base url to send email over Mailgun. As of CTFd v3, Mailgun integration is deprecated.
# Installations using the Mailgun API should migrate over to SMTP settings.
# Mailgun 을 통해 이메일을 발송하기 위한 기본 URL 입니다. CTFd v3 부터 Mailgun 확장은 더 이상 사용되지 않습니다.
# Mailgun API 설치는 SMTP 설정으로 마이그레이션 해야합니다.
MAILGUN_BASE_URL =

[uploads]
# UPLOAD_PROVIDER
# Specifies the service that CTFd should use to store files.
# Can be set to filesystem or s3
# CTFd가 파일을 저장하는 데에 사용하는 서비스를 설정합니다.
# filsystem 혹은 s3로 설정할 수 있습니다.
UPLOAD_PROVIDER =

# UPLOAD_FOLDER
# The location where files are uploaded under the filesystem uploader.
# The default destination is the CTFd/uploads folder.
# 파일시스템 업로더 아래에서 파일이 업로드되는 위치입니다.
# 기본 주소는 CTFd/uploads 폴더입니다.
UPLOAD_FOLDER =

# AWS_ACCESS_KEY_ID
# AWS access token used to authenticate to the S3 bucket. Only used under the s3 uploader.
# S3 버킷 인증에 사용되는 AWS 액세스 토큰입니다. s3 업로더에서만 사용됩니다.
AWS_ACCESS_KEY_ID =

# AWS_SECRET_ACCESS_KEY
# AWS secret token used to authenticate to the S3 bucket. Only used under the s3 uploader.
# S3 버킷 인증에 사용되는 AWS 비밀 토큰입니다. s3 업로더에서만 사용됩니다.
AWS_SECRET_ACCESS_KEY =

# AWS_S3_BUCKET
# The unique identifier for your S3 bucket. Only used under the s3 uploader.
# S3 버킷 고유 식별자입니다. s3 업로더에서만 사용됩니다.
AWS_S3_BUCKET =

# AWS_S3_ENDPOINT_URL
# A URL pointing to a custom S3 implementation. Only used under the s3 uploader.
# 커스텀 S3 실행을 가르키는 URL 입니다. s3 업로더에서만 사용됩니다.
AWS_S3_ENDPOINT_URL =

[logs]
# LOG_FOLDER
# The location where logs are written. These are the logs for CTFd key submissions, registrations, and logins. The default location is the CTFd/logs folder.
# 로그가 기록될 위치입니다. CTFd 키 제출, 회원가입, 로그인을 위한 로그입니다. 기본 위치는 CTFd/logs 폴더입니다.
LOG_FOLDER =

[optional]
# REVERSE_PROXY
# Specifies whether CTFd is behind a reverse proxy or not. Set to true if using a reverse proxy like nginx.
# You can also specify a comma seperated set of numbers specifying the reverse proxy configuration settings.
# See https://werkzeug.palletsprojects.com/en/0.15.x/middleware/proxy_fix/#werkzeug.middleware.proxy_fix.ProxyFix.
# For example to configure `x_for=1, x_proto=1, x_host=1, x_port=1, x_prefix=1` specify `1,1,1,1,1`.
# If you specify `true` CTFd will default to the above behavior with all proxy settings set to 1.
#
# CTFd 가 리버스 프록시 뒤에 위치하는지 여부를 설정합니다. nginx 같은 역방향 프록시를 사용하는 경우 true 로 설정합니다.
# 리버스 프록시 구성 설정을 위해 쉼표로 구분하여 숫자 값을 지정할 수 있습니다.
REVERSE_PROXY =

# THEME_FALLBACK
# Specifies whether CTFd will fallback to the default "core" theme for missing pages/content. Useful for developing themes or using incomplete themes.
# Defaults to true.
# 누락된 페이지/내용에 대해 CTFd 를 기본 "core" 테마로 폴백할지 여부를 설정합니다. 테마를 개발중이거나 불완전한 테마를 사용할 때 유용합니다. 
# 기본값은 true 입니다.
THEME_FALLBACK =

# TEMPLATES_AUTO_RELOAD
# Specifies whether Flask should check for modifications to templates and reload them automatically. Defaults to true.
# Flask 가 텀플릿의 수정사항을 확인하고 자동으로 reload 하는지 여부를 설정합니다. 기본값은 true 입니다.
TEMPLATES_AUTO_RELOAD =

# SQLALCHEMY_TRACK_MODIFICATIONS
# Automatically disabled to suppress warnings and save memory.
# You should only enable this if you need it.
# Defaults to false.
# 경고를 표시하지 않고 메모리를 절약하기 위해 자동으로 사용하지 않습니다.
# 필요한 경우에만 활성화를 해야합니다.
# 기본값은 false 입니다.
SQLALCHEMY_TRACK_MODIFICATIONS =

# SWAGGER_UI
# Enable the Swagger UI endpoint at /api/v1/
# /api/v1/ 에서 Swagger UI 엔드포인트를 사용하도록 설정합니다.
SWAGGER_UI =

# UPDATE_CHECK
# Specifies whether or not CTFd will check whether or not there is a new version of CTFd. Defaults True.
# CTFd의 새 버전이 존재하는지 확인하는 여부를 설정합니다. 기본값은 True 입니다.  
UPDATE_CHECK =

# APPLICATION_ROOT
# Specifies what path CTFd is mounted under. It can be used to run CTFd in a subdirectory.
# Example: /ctfd
# CTFd가 마운트되는 경로를 지정합니다. 하위 디렉토리에서 CTFd 를 실행하는 데 사용할 수 있습니다.
# 예: /ctfd
APPLICATION_ROOT =

# SERVER_SENT_EVENTS
# Specifies whether or not to enable the Server-Sent Events based Notifications system.
# Defaults to true
# Server-Sent 이벤트 기반 알림 시스템 사용 여부를 설정합니다.
# 기본값은 true 입니다.
SERVER_SENT_EVENTS =

# HTML_SANITIZATION
# Specifies whether CTFd should sanitize HTML content
# Defaults to false
# CTFd 에서 HTML 내요을 검사할지 여부를 설정합니다.
# 기본값은 false 입니다.
HTML_SANITIZATION =

# SQLALCHEMY_MAX_OVERFLOW
# Specifies the max_overflow setting for SQLAlchemy's Engine
# SQLAlchemy 엔진에 대한 max_overflow 설정을 지정합니다.
# https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine
# https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/#configuration-keys
SQLALCHEMY_MAX_OVERFLOW =

# SQLALCHEMY_POOL_PRE_PING
# Specifies the pool_pre_ping setting for SQLAlchemy's Engine
# SQLAlchemy엔진에 대한 pool_pre_ping 설정을 지정합니다.
# https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine
# https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/#configuration-keys
SQLALCHEMY_POOL_PRE_PING =

[oauth]
# OAUTH_CLIENT_ID
# Register an event at https://majorleaguecyber.org/ and use the Client ID here
OAUTH_CLIENT_ID =

# OAUTH_CLIENT_ID
# Register an event at https://majorleaguecyber.org/ and use the Client Secret here
OAUTH_CLIENT_SECRET =

[extra]
# The extra section can be used to specify additional values to be loaded into CTFd's configuration
# 추가 섹션을 사용하여 CTFd 설정에 불러올 추가 값을 설정할 수 있습니다.
